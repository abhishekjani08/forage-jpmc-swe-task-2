From dc15338312b605f1d8834249b8d1d1542a0d0fe9 Mon Sep 17 00:00:00 2001
From: 50_Abhishek Jani <88500027+abhishekjani08@users.noreply.github.com>
Date: Thu, 25 May 2023 14:25:49 +0530
Subject: [PATCH] task2

---
 package-lock.json |  2 +-
 package.json      |  4 +--
 src/App.tsx       | 72 +++++++++++++++++++++++++++--------------------
 src/Graph.tsx     | 13 +++++++--
 4 files changed, 56 insertions(+), 35 deletions(-)

diff --git a/package-lock.json b/package-lock.json
index 21b4315..f5728d2 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -20,7 +20,7 @@
         "puppeteer": "^1.19.0",
         "react": "^16.9.0",
         "react-dom": "^16.9.0",
-        "react-scripts": "2.1.3"
+        "react-scripts": "^2.1.3"
       },
       "devDependencies": {
         "awesome-typescript-loader": "^5.2.1",
diff --git a/package.json b/package.json
index ca234e9..3229280 100644
--- a/package.json
+++ b/package.json
@@ -15,10 +15,10 @@
     "puppeteer": "^1.19.0",
     "react": "^16.9.0",
     "react-dom": "^16.9.0",
-    "react-scripts": "2.1.3"
+    "react-scripts": "^2.1.3"
   },
   "scripts": {
-    "start": "react-scripts --openssl-legacy-provider start",
+    "start": "react-scripts start",
     "build": "react-scripts build",
     "test": "react-scripts test",
     "eject": "react-scripts eject"
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..94be793 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,46 +31,56 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data} />)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
-  /**
-   * Render the App react component
-   */
-  render() {
-    return (
-      <div className="App">
-        <header className="App-header">
-          Bank & Merge Co Task 2
-        </header>
-        <div className="App-content">
-          <button className="btn btn-primary Stream-button"
-            // when button is click, our react app tries to request
-            // new data from the server.
-            // As part of your task, update the getDataFromServer() function
-            // to keep requesting the data every 100ms until the app is closed
-            // or the server does not return anymore data.
-            onClick={() => {this.getDataFromServer()}}>
-            Start Streaming Data
-          </button>
-          <div className="Graph">
-            {this.renderGraph()}
-          </div>
+/**
+ * Render the App react component
+ */
+render() {
+  return (
+    <div className="App">
+      <header className="App-header">
+        Bank & Merge Co Task 2
+      </header>
+      <div className="App-content">
+        <button className="btn btn-primary Stream-button"
+          // when button is click, our react app tries to request
+          // new data from the server.
+          // As part of your task, update the getDataFromServer() function
+          // to keep requesting the data every 100ms until the app is closed
+          // or the server does not return anymore data.
+          onClick={() => { this.getDataFromServer() }}>
+          Start Streaming Data
+        </button>
+        <div className="Graph">
+          {this.renderGraph()}
         </div>
       </div>
-    )
-  }
+    </div>
+  )
+}
 }
 
 export default App;
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..7a60562 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,15 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute('view','y-line');
+      elem.setAttribute('column-pivots','["stocks"]');
+      elem.setAttribute('row-pivots','["timestamp"]');
+      elem.setAttribute('columns','["top_ask_price"]');
+      elem.setAttribute('aggregates',`{ 
+        "stock" : "distinct count",
+        "top_ask_price" : "avg",
+        "top_bid_price" : "avg",
+        "timestamp" : "distinct count"}`);
     }
   }
 
-- 
2.35.1.windows.2

